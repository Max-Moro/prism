# generated by datamodel-codegen:
#   filename:  sizing_result.schema.json

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Extra, Field


class Override(BaseModel):
    class Config:
        extra = Extra.forbid

    name: str
    kind: str
    teams: List[str] = Field(..., min_items=2)


class Warnings(BaseModel):
    class Config:
        extra = Extra.forbid

    overrides: Optional[List[Override]] = None


class ResourcePair(BaseModel):
    class Config:
        extra = Extra.forbid

    cpu: float
    memory: float


class TotalResources(BaseModel):
    class Config:
        extra = Extra.forbid

    requests: ResourcePair
    limits: ResourcePair


class Requests(BaseModel):
    class Config:
        extra = Extra.forbid

    cpu_cores: float
    memory_bytes: float


class Limits(BaseModel):
    class Config:
        extra = Extra.forbid

    cpu_cores: float
    memory_bytes: float


class ServiceResources(BaseModel):
    class Config:
        extra = Extra.forbid

    requests: Requests
    limits: Limits


class InfraObject(BaseModel):
    class Config:
        extra = Extra.forbid

    type: str
    version: Optional[str] = None
    capacity: Dict[str, float]


class ZoneResult(BaseModel):
    class Config:
        extra = Extra.forbid

    services: Dict[str, ServiceResources]
    generic_services: Dict[str, ServiceResources]
    infra: Dict[str, InfraObject]
    totals: TotalResources


class PrismSizingResult(BaseModel):
    class Config:
        extra = Extra.forbid

    zones: Dict[str, ZoneResult]
    totals: TotalResources
    infra_totals: Optional[Dict[str, Dict[str, float]]] = Field(
        None, description="Суммарные capacity по типу infra-dependency"
    )
    warnings: Optional[Warnings] = Field(
        None, description="Нефатальные сообщения расчёта"
    )
